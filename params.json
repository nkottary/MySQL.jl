{"name":"MySQL.jl","tagline":"Access MySQL from Julia","body":"MySQL.jl\r\n======\r\n\r\n[![Build Status](https://travis-ci.org/JuliaDB/MySQL.jl.svg?branch=master)](https://travis-ci.org/JuliaDB/MySQL.jl)\r\n\r\nJulia bindings and helper functions for [MariaDB](https://mariadb.org/)/MySQL C library.\r\nQuery results can be received as julia arrays or as [Data Frames](https://github.com/JuliaStats/DataFrames.jl).\r\n\r\n# Installation\r\n\r\nTo get the master version:\r\n```\r\nPkg.clone(\"https://github.com/JuliaComputing/MySQL.jl\")\r\n```\r\n\r\n# Example usage\r\n\r\nConnect to the MySQL server:\r\n```\r\nusing MySQL\r\ncon = mysql_connect(HOST, USER, PASSWD, DBNAME)\r\n```\r\n\r\nCreate/Insert/Update etc:\r\n```\r\ncommand = \"\"\"CREATE TABLE Employee\r\n             (\r\n                 ID INT NOT NULL AUTO_INCREMENT,\r\n                 Name VARCHAR(255),\r\n                 Salary FLOAT,\r\n                 JoinDate DATE,\r\n                 LastLogin DATETIME,\r\n                 LunchTime TIME,\r\n                 PRIMARY KEY (ID)\r\n             );\"\"\"\r\nresponse = mysql_query(con, command)\r\nif (response == 0)\r\n    println(\"Create table succeeded.\")\r\nelse\r\n    println(\"Create table failed.\")\r\nend\r\n```\r\n\r\nObtain SELECT results as dataframe:\r\n\r\n```\r\ncommand = \"\"\"SELECT * FROM Employee;\"\"\"\r\ndframe = execute_query(con, command)\r\n```\r\nThe `mysql_execute_query()` API will take care of handling errors and freeing the memory allocated to the results.\r\n\r\nObtain SELECT results as julia Array:\r\n\r\n```\r\ncommand = \"\"\"SELECT * FROM Employee;\"\"\"\r\nretarr = mysql_execute_query(con, command, opformat=MYSQL_ARRAY)\r\n```\r\n\r\nObtain SELECT results as julia Array with each row as a tuple:\r\n\r\n```\r\ncommand = \"\"\"SELECT * FROM Employee;\"\"\"\r\nretarr = mysql_execute_query(con, command, opformat=MYSQL_TUPLES)\r\n```\r\n\r\nIterate over rows (get each row as a tuple):\r\n\r\n```\r\nresponse = mysql_query(con, \"SELECT * FROM some_table;\")\r\nmysql_display_error(con, response != 0,\r\n                    \"Error occured while executing mysql_query on \\\"$command\\\"\")\r\n\r\nresult = mysql_store_result(con)\r\n\r\nfor row in MySQLRowIterator(result)\r\n    println(row)\r\nend\r\n\r\nmysql_free_result(result)\r\n```\r\n\r\nGet metadata of fields:\r\n\r\n```\r\nresponse = mysql_query(con, \"SELECT * FROM some_table;\")\r\nmysql_display_error(con, response != 0,\r\n                    \"Error occured while executing mysql_query on \\\"$command\\\"\")\r\n\r\nresult = mysql_store_result(con)\r\nmysqlfields = mysql_get_field_metadata(result)\r\nfor i = 1:length(mysqlfields)\r\n    field = mysqlfields[i]\r\n    println(\"Field name is: \", bytestring(field.name))\r\n    println(\"Field length is: \", field_length)\r\n    println(\"Field type is: \", field_type)\r\nend\r\n```\r\n\r\nExecute a multi query:\r\n\r\n```\r\ncommand = \"\"\"INSERT INTO Employee (Name) VALUES ('');\r\n             UPDATE Employee SET LunchTime = '15:00:00' WHERE LENGTH(Name) > 5;\"\"\"\r\ndata = mysql_execute_query(con, command)\r\n```\r\n\r\n`data` contains an array of dataframes (or arrays if MYSQL_ARRAY was specified as the\r\n 3rd argument to the above API) corresponding to the SELECT queries and number of\r\n affected rows corresponding to the non-SELECT queries in the multi statement.\r\n\r\nGet dataframes using prepared statements:\r\n\r\n```\r\ncommand = \"\"\"SELECT * FROM Employee;\"\"\"\r\n\r\nstmt = mysql_stmt_init(con)\r\n\r\nif (stmt == C_NULL)\r\n    error(\"Error in initialization of statement.\")\r\nend\r\n\r\nresponse = mysql_stmt_prepare(stmt, command)\r\nmysql_display_error(con, response != 0,\r\n                    \"Error occured while preparing statement for query \\\"$command\\\"\")\r\n\r\ndframe = mysql_stmt_result_to_dataframe(stmt)\r\nmysql_stmt_close(stmt)\r\n```\r\n\r\nClose the connection:\r\n\r\n```\r\nmysql_disconnect(con)\r\n```\r\n\r\n# How to solve MySQL library not found error\r\n\r\nThis error may occur during `using MySQL`. To resolve this-\r\n* Ubuntu: Just add the MariaDB/MySQL .so file to lib_choices array in src/config.jl. If it is already there\r\nmake sure LD_LIBRARY_PATH contains the MariaDB/MySQL .so file directory path. Usually this is something like\r\n`/usr/local/lib/mariadb/`.\r\n* OSX: Same as above. In this case the file will be something like libmysqlclient.dylib.\r\n* Windows: There is no `@windows_only lib_choices` currently. Please add one and send a pull request.\r\n\r\n# Tests\r\n\r\nTo run the tests you must have MySQL server running on the host. Set the constants HOST and ROOTPASS \r\nin test/runtests.jl to the host and root password on your test setup. Run the tests using:\r\n```\r\nPkg.test(\"MySQL\")\r\n```\r\n\r\n# Performance\r\n\r\nA total of 67,000 insert queries were executed batch wise in batch sizes of 50, 100, 150 ... so on.\r\n The time taken for all the queries to complete is plotted on the y axis and the batch sizes on x axis.\r\n\r\n![alt tag](https://raw.githubusercontent.com/nkottary/nishanth.github.io/master/plot.png)\r\n\r\n# Acknowledgement\r\n\r\nWe acknowledge the contributions of [JustDial](http://www.justdial.com) towards this work.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}